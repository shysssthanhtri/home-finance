// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

generator zod {
    provider = "zod-prisma"
    output   = "../src/schemas/_generated" // (default) the directory where generated zod schemas will be saved

    relationModel = true // (default) Create and export both plain and related models.
    // relationModel         = "default" // Do not export model without relations.
    // relationModel         = false // Do not generate related model

    modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
    // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

    modelSuffix = "Schema" // (default) Suffix to apply to your prisma models when naming Zod schemas

    // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
    useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

    // imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

    // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
    prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
    // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts         Account[]
    sessions         Session[]
    posts            Post[]
    joinedTeams      TeamMember[]
    personalTeam     Team?             @relation(name: "personal_team")
    activeTeam       ActiveTeam?       @relation(name: "active_team_user")
    joinTeamRequests RequestJoinTeam[]
    joinTeamInvites  InviteJoinTeam[]
    transaction      Transaction[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//  Application logic
model ActiveTeam {
    userId String
    teamId String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade, name: "active_team_user", map: "active_team_user_fk")
    team Team @relation(fields: [teamId], references: [id], onDelete: Cascade, name: "active_team_team", map: "active_team_team_fk")

    @@id([userId, teamId])
    @@unique([userId])
}

model Team {
    id   String @id @default(cuid())
    name String

    belongToUserId String?

    members          TeamMember[]
    belongToUser     User?             @relation(fields: [belongToUserId], references: [id], onDelete: Cascade, name: "personal_team", map: "personal_team_fk")
    activeTeams      ActiveTeam[]      @relation(name: "active_team_team")
    joinTeamRequests RequestJoinTeam[]
    joinTeamInvites  InviteJoinTeam[]
    transactions     Transaction[]

    @@unique([belongToUserId])
}

enum TeamMemberRole {
    ADMIN
    MEMBER
    VIEWER
}

model TeamMember {
    teamId String
    userId String
    role   TeamMemberRole

    team Team @relation(fields: [teamId], references: [id])
    user User @relation(fields: [userId], references: [id])

    @@id([teamId, userId])
}

model RequestJoinTeam {
    userId String
    teamId String
    role   TeamMemberRole

    team Team @relation(fields: [teamId], references: [id])
    user User @relation(fields: [userId], references: [id])

    @@id([teamId, userId])
}

model InviteJoinTeam {
    userId String
    teamId String
    role   TeamMemberRole

    team Team @relation(fields: [teamId], references: [id])
    user User @relation(fields: [userId], references: [id])

    @@id([teamId, userId])
}

enum TransactionType {
    IN
    OUT
}

model Transaction {
    id          String          @id @default(cuid())
    teamId      String
    time        DateTime
    type        TransactionType
    title       String
    description String?
    amount      Float

    createdById String

    createdBy User @relation(fields: [createdById], references: [id])
    team      Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}
